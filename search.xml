<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于Cocos2dx打包游戏的jsc文件解密</title>
    <url>/2021/04/13/%E5%85%B3%E4%BA%8ECocos2dx%E6%89%93%E5%8C%85%E6%B8%B8%E6%88%8F%E7%9A%84jsc%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>对于<strong>Cocos2dx</strong>打包的游戏就不必多说，我们在修改游戏中，经常会碰到后缀为<strong>jsc</strong>的文件，这是基于cocos2d开发的游戏的加密代码，本质上是<strong>js</strong>文件，只是被加密了。</p>
<p>所以如果我们想了解一个jsc游戏的逻辑，就需要将它解密。</p>
<span id="more"></span>

<p>最近，在碰到相关的jsc游戏后，了解了相关知识后，对其解密过程有了熟悉，所以就分享下思路吧，有什么问题欢迎各位交流。</p>
<p><a href="https://beisheng.lanzous.com/iHDeWeb6b7e">解密工具下载</a></p>
<hr>
<h2 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a><strong>解密过程</strong></h2><p>游戏例子这里就不在提供。</p>
<p>打开游戏安装包/assets/src/，看到加密过的<strong>project.jsc</strong>文件（案例游戏逻辑代码）。</p>
<p><img src="https://i.loli.net/2021/04/14/DW5F9Zach1EsmeR.png" alt="找到游戏逻辑所在的文件"></p>
<p>以文本格式打开，发现无法阅读和修改。</p>
<p><img src="https://i.loli.net/2021/04/14/j62idhTO7sLcRxA.jpg" alt="解密前的jsc文件"></p>
<p><strong>下面开始解密：</strong></p>
<p>将解密工具解压至C盘目录下并将project.jsc文件拷贝至该文件夹下（为使用方便，我这里将解压后的文件夹命名为a）。</p>
<p><img src="https://i.loli.net/2021/04/14/FEvoZOXhJ5MRTx8.png" alt="解压解密工具并拷贝解密文件"></p>
<p>我们可以双击decrypt.exe了解我们需要的参数，该窗口可以关闭。</p>
<p><img src="https://i.loli.net/2021/04/14/DpiYSlodub23HPv.png" alt="需要的参数"></p>
<p>获取key的话，可以用16进制打开安装包lib目录下的libcocos2djs.so文件，搜索Ascii字符串<strong>Cocos Game</strong>，其后面的第15个字节开始就是key了，如下图：</p>
<p><img src="https://i.loli.net/2021/04/14/Tuz2Ng83ODHLxd4.png" alt="获取Key参数"></p>
<p>调出我们的命令提示符cmd，首先切换到我们的工具路径（a文件夹下）。</p>
<p><img src="https://i.loli.net/2021/04/14/H9vzptNyFVCjUGA.png" alt="切换至工具目录"></p>
<p>我们要解密project.jsc，就输入<code>decrypt -pw xxxxxxx -f project.jsc</code>，参数的解释上面已给出。</p>
<p>这里就是<code>decrypt -pw bandoubb123123 -f project.jsc</code>，回车执行命令。</p>
<p><img src="https://i.loli.net/2021/04/14/SRYn5pgbVArTNcF.jpg" alt="解密过程"></p>
<p>返回我们的解压工具文件夹，可以看到多了一个project.js文件：</p>
<p><img src="https://i.loli.net/2021/04/14/NVLrys5f9KPAud8.png" alt="解密完成"></p>
<p>用文本工具打开解密后获得的js文件：</p>
<p><img src="https://i.loli.net/2021/04/14/Or4CBPwfuQG2lDN.jpg" alt="解密后的文件"></p>
<p>出现了可以正常阅读的游戏代码，解密结束。</p>
<hr>
<h2 id="几点提示"><a href="#几点提示" class="headerlink" title="几点提示"></a><strong>几点提示</strong></h2><ul>
<li>解密需要1~2秒;</li>
<li>显示解密失败（decrypt failed）的一般都是密钥问题，也有些是版本不对的;</li>
<li>Cocos 1.9.3之前的版本可能不支持;</li>
<li>解密后的js文件直接替换原来的jsc文件，重新打包安装包即可，不需要重新加密为jsc文件。</li>
</ul>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>Cocos2dx</tag>
        <tag>游戏逆向</tag>
        <tag>解密</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Cocos2dx-js游戏的jsc文件解密(二)</title>
    <url>/2021/05/17/%E5%85%B3%E4%BA%8ECocos2dx-js%E6%B8%B8%E6%88%8F%E7%9A%84jsc%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86-%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一期关于Cocos2dx-js游戏的jsc文件解密教程后，有一些同学似乎遇到了一些新的问题，下面列举一些：</p>
<ul>
<li>利用ASCII字符串Cocos Game来定位解密密匙在有些游戏中似乎行不通；</li>
<li>拿到了正确的Key后，利用解密工具解出来依然是乱码；</li>
<li>解密后的js文件用不用重新加密为jsc格式的文件然后打包回去；</li>
<li>解密的密匙还能在哪里获取；</li>
<li>······</li>
</ul>
<span id="more"></span>

<p>诸如此类的问题很多，希望看了下面的一些简单分析能为大家提供一些答案。</p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>研究逆向先看正向，从官网上下载CocosCreator开发工具，使用案例js工程尝试构建编译，在构建发布页面很清楚的看到了脚本加密选项。</p>
<p><img src="https://i.loli.net/2021/05/24/bkChvPD12FpItTY.png" alt="密匙选项"></p>
<p>按流程构建编译后得到简单的样本APK。关于APK内各个文件夹的作用和内容，这里不在多说，感兴趣的同学可以结合Cocos2dx源码进行分析。</p>
<p><img src="https://i.loli.net/2021/05/25/F9r3NqaYmWxLdz8.png" alt="样本APK的jsc文件结构"></p>
<p>先拿样本APK做简单的分析，先用Jadx-gui去java层稍微读下源码，了解下assets目录下二进制源代码的加载情况，在入口Cocos2dxActivity处我们看到有一个onLoadNativeLibraries函数，跳转到其声明发现加载了一个叫android.app.lib_name的字符串资源。</p>
<p><img src="https://i.loli.net/2021/05/25/rHu2dXaPs9FBK7h.png" alt="Coscos2dxActivity入口处"></p>
<p><img src="https://i.loli.net/2021/05/30/PIhfe867zYZkjqT.png" alt="加载声明"></p>
<p>在AndroidManifest.xml下找到其定义为cocos2djs，即加载了libcocos2djs.so文件。</p>
<p><img src="https://i.loli.net/2021/05/30/pYolcxA34CumLO9.png" alt="xml文件中的定义"></p>
<p>明确了加载Assets目录资源的操作大概率不在java层后，再结合非虫前辈的“jsc反编译工具编写探索之路”，研究对象随即转移到libcocos2djs.so上。</p>
<h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><p>通过阅读Cocos2dx源码发现，其脚本加解密用的就是xxtea加密和解密(和Cocos2dx-lua加解密相似)。进而结合CocosCreator了解到其构建项目的过程为：</p>
<ol>
<li>工程用到的所有js脚本聚合为project.js等几个脚本</li>
<li>如果勾选“Zip 压缩”选项，会进行压缩project.js，会减少很多体积，进而可以减少包大小</li>
<li>使用xxtea进行加密上述文件，生成project.jsc</li>
<li>将project.jsc打包到apk、ipa等安装包中</li>
</ol>
<p>在程序运行时，正好做了相反操作：</p>
<ol>
<li>使用xxtea进行解密</li>
<li>如果勾选“Zip 压缩”选项，进行解压缩</li>
<li>调用js代码</li>
</ol>
<h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p>通过以上初步分析和构建过程的了解，怎么去获得Key值似乎就有些思路了。这里用两个游戏案例做分析，某Tap平台可下载：</p>
<ul>
<li>某书院模拟器（A）</li>
<li>某公传承（B）</li>
</ul>
<p>先拿游戏A分析，按上个帖子中的方法把安装包lib目录下的libcocos2djs.so拖进十六进制编辑器，搜索ASCII字符串:Cocos Game,结果没有搜索到相关信息。</p>
<p><img src="https://i.loli.net/2021/05/27/c1EuZsdAqOGH9hx.png" alt="Cocos Game定位Key失效"></p>
<p>直接上IDA分析libcocos2djs.so文件，导出函数名很整洁看起来没有加什么奇怪的东西，说明没有做一些安全手段。搜索xxtea / key之类的函数名得到这几个相关函数：</p>
<p><img src="https://i.loli.net/2021/05/25/P8I2w4TktFsZMeL.png" alt="游戏A的so层关键函数"></p>
<p>先尝试直接在so层寻找明文的Key，函数jsb_set_xxtea_key看着简单，似乎直接设置了key，去看看有没有希望的Key值。F5伪代码看下，传入了一个字符串化的指针参数，大概率可能是Key。</p>
<p><img src="https://i.loli.net/2021/05/25/lizos5YmI8BaRPu.png" alt="jsb_set_xxtea_key函数"></p>
<p>回溯调用该函数的地方，看下传入的参数值。</p>
<p><img src="https://i.loli.net/2021/05/25/DGUiMXaewgmzuxp.png" alt="A-applicationDidFinishLaunching函数"></p>
<p>很明显的得到了可疑的Key值（关键参数v26），尝试拿去解密jsc文件，解密成功。</p>
<p><img src="https://i.loli.net/2021/05/25/za4rYwU5M7ldBcL.png" alt="游戏A解密成功"></p>
<p>此时再去分析下游戏B的libcocos2djs.so文件，IDA打开发现似乎是和游戏A相似的结构。</p>
<p><img src="https://i.loli.net/2021/05/25/TMQteldCV1yipxs.png" alt="游戏B的so层关键函数"></p>
<p>同样，回溯关键函数jsb_set_xxtea_key同样来到了applicationDidFinishLaunching这个函数内，但似乎这次Key值（关键参数v10）不像游戏A中那样明文显示出来</p>
<p><img src="https://i.loli.net/2021/05/25/onxW8vQFS3K7Rs1.png" alt="B-applicationDidFinishLaunching函数"></p>
<p>去附近的字符串看看有什么可疑的，双击jsb-adapter/jsb-builtin.js字符串。</p>
<p><img src="https://i.loli.net/2021/05/25/VMEshj7PvGWmxXf.png" alt="B-附近字符串"></p>
<p>却看到了可疑的Key值和常规的Cocos Game，再尝试拿这个Key值去解密，同样的解密成功。</p>
<p>此时返回游戏A中的同一位置，观察密匙附近的字符串。对比下，似乎只有main.js这一个相同的地方，并且都在applicationDidFinishLaunching函数内部，或许是新的找Key值的关键？大家日后可以试试。</p>
<p><img src="https://i.loli.net/2021/05/25/VIdEFj4UGha1PKy.png" alt="A-附近字符串"></p>
<p>同时两个游戏的密匙都在函数applicationDidFinishLaunching中所体现出来，这就不得不促使我们了解下该函数。阅读下相关源码，了解到在一个Cocos2d-x的应用入口中，当应用环境加载完成会回调以下方法：</p>
<p><img src="https://i.loli.net/2021/05/25/h64GYagTUtNXfiH.png" alt="applicationDidFinishLaunching函数"></p>
<p>此时再结合CocosCreator构建项目的过程就不难理解了，当游戏应用环境加载完毕后，该函数内把Key值传入到解密的函数中去，进而解密函数将jsc文件化为js文件，并拷贝到内存中去，游戏开始调用js文件，进入游戏界面。</p>
<h2 id="其他关键函数的分析"><a href="#其他关键函数的分析" class="headerlink" title="其他关键函数的分析"></a>其他关键函数的分析</h2><p>以上的实例分析只是拿简单的jsb_set_xxtea_key函数入手，当然也可以拿其他的关键函数入手，依然拿游戏A举例。去其他相关函数看下，在xxtea_decrypt这个函数里看到有memcpy和memset操作，很像在开内存拷贝数据， </p>
<p><img src="https://i.loli.net/2021/05/29/yYIoZQhw8GLgD5S.png" alt="xxtea_decrypt函数"></p>
<p>并且do_xxtea_decrypt这个函数里大量的计算很像解密算法，</p>
<p><img src="https://i.loli.net/2021/05/29/A98S5fYloy4hi3R.png" alt="do_xxtea_decrypt函数"></p>
<p>再结合CocosCreator源代码<a href="https://github.com/cocos-creator/engine-native/blob/f4a387d614691101c79ef75d1dbce705c834cad3/cocos/scripting/js-bindings/manual/jsb_global.cpp#L181">jsb_global.cpp</a>，就不难知道传入xxtea_decrypt函数的参数中，第三个参数即为解密的Key值。</p>
<p><img src="https://i.loli.net/2021/05/29/dM3pFUePcngjShl.png"></p>
<p>所以当下考虑直接在游戏运行时Hook这个函数打印出key值，由于是Native层，所以这里用简单的Frida脚本来Hook，关于Frida框架的使用这里就不说了，再说就多了emm······</p>
<p>adb连接测试机，终端输入 frida-ps -U 查看当前手机上的进程，以测试是否连通；</p>
<p><img src="https://i.loli.net/2021/05/29/w1uSdPKiC2RFzMW.png" alt="Frida连接测试"></p>
<p>接着编写一个简单的js脚本，当libcocos2djs.so文件加载时，直接hook xxtea_decrypt函数：</p>
<p><img src="https://i.loli.net/2021/05/29/xXqkHYeGNDLroIE.png" alt="hook脚本"></p>
<p>终端输入frida -U -f 包名 -l key.js –no-pause，拉起对应app进行hook，此时游戏会重新启动，重新加载运行游戏需要的环境，并保持运行。</p>
<p><img src="https://i.loli.net/2021/05/29/Q1bNckv4rUfEpdx.png" alt="hook拿到Key值"></p>
<p>成功拿到了Key值，接下来就可以解密分析相关文件了。</p>
<h2 id="关于解密工具"><a href="#关于解密工具" class="headerlink" title="关于解密工具"></a>关于解密工具</h2><p>其实拿到Key值后，解密的逻辑直接参照CocosCreator源代码xxtea_decrypt部分，抄一份对应实现即可，自己也尝试写了一份，但操作较为繁琐，对不同的Cocos2dx版本有不同的处理。同时在不同的机子上测试也得到了不同的结果emm···还没有时间进行修复，当然后面有时间改完封装也会拿出来供大家测试的。</p>
<p>另外，也在一些论坛上也寻找了一些封装好的加解密程序，比如<a href="https://beisheng.lanzoui.com/iSxKhplgnch">jsc解密v1.44</a>，似乎能满足现在Cocos2dx版本的文件加解密，操作也较为简单，大家可以尝试食用。</p>
<p><img src="https://i.loli.net/2021/05/29/FuHqP9416a3e8Ez.png" alt="加解密工具"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>常规在libcocos2djs.so文件中搜索Ascil字符串“Cocos Game”、“main.js”、”jsb-adapter/jsb-builtin.js”等一些常规的普遍关键词来尝试定位Key。</li>
<li>如果无法寻得，就上IDA看下so文件做没做过加密混淆，没有的话就结合applicationDidFinishLaunching函数等来寻找明文的Key值，或者hook关键函数来打印Key值。</li>
<li>当然，游戏做了一些混淆或者其他安全手段时就需要先处理其他加密了emm···</li>
<li>另外，Cocos2dx-js引擎做的游戏在运行时会先检测内存里面有没有js文件，有的话就直接运行js文件，没有的话就从jsc转换出js文件，所以解密后的js文件直接丢入原包就行。当然，除了一些做了文件验证形式的安全手段的游戏。</li>
</ol>
<p>好了，到这里基本的教程也已经结束了，大家有什么好的方法和见解也欢迎交流，谢谢大家。</p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>Cocos2dx</tag>
        <tag>游戏逆向</tag>
        <tag>解密</tag>
      </tags>
  </entry>
</search>
